// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AuctionDbContext))]
    partial class AuctionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Auction for various electronics items",
                            EndTime = new DateTime(2024, 8, 15, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 8, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Electronics Bonanza",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Auction for high-quality mountain bikes",
                            EndTime = new DateTime(2024, 8, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            StartTime = new DateTime(2024, 8, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Bike Auction",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Bid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Bids");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionDuration")
                        .HasColumnType("int");

                    b.Property<int?>("AuctionId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuctionDuration = 0,
                            AuctionId = 1,
                            Category = "Electronics",
                            Description = "A high-performance laptop",
                            IsSold = false,
                            Name = "Laptop",
                            SellerId = 2,
                            StartingPrice = 500m
                        },
                        new
                        {
                            Id = 2,
                            AuctionDuration = 0,
                            AuctionId = 1,
                            Category = "Electronics",
                            Description = "A latest model smartphone",
                            IsSold = false,
                            Name = "Smartphone",
                            SellerId = 2,
                            StartingPrice = 300m
                        },
                        new
                        {
                            Id = 3,
                            AuctionDuration = 0,
                            AuctionId = 2,
                            Category = "Vehicles",
                            Description = "A mountain bike",
                            IsSold = false,
                            Name = "Bike",
                            SellerId = 1,
                            StartingPrice = 150m
                        });
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 99,
                            Email = "admin@example.com",
                            PasswordHash = "$2a$11$XsDrrvRM5Ne0/305SjclLeTocf9cZ9CFU2qC2yy8vSfdtCY2UUNnG",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 1,
                            Email = "user1@example.com",
                            PasswordHash = "$2a$11$xVmtwa4XU136oBzgXPqXT.IBrvsHK5xwOMRYjOVusQiaAAtDSaZoe",
                            Role = "User"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user2@example.com",
                            PasswordHash = "$2a$11$m7ypIDXqtuNWKUNNQHhfWe7Gltqz8R.hKL9gQjZILPFhTgEWSVyxW",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("Auction", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany("CreatedAuctions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bid", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("Bids")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", "User")
                        .WithMany("Bids")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Auction", "Auction")
                        .WithMany("Products")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("User", "Buyer")
                        .WithMany("BoughtProducts")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("User", "Seller")
                        .WithMany("SoldProducts")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Auction");

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Auction", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Bids");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("BoughtProducts");

                    b.Navigation("CreatedAuctions");

                    b.Navigation("SoldProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
